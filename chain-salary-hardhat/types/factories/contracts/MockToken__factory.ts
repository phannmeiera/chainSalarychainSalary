/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { MockToken, MockTokenInterface } from "../../contracts/MockToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f5ffd5b50604051610b0b380380610b0b83398101604081905261002e91610264565b8282600361003c8382610355565b5060046100498282610355565b50505061005c338261006460201b60201c565b505050610434565b6001600160a01b0382166100925760405163ec442f0560e01b81525f60048201526024015b60405180910390fd5b61009d5f83836100a1565b5050565b6001600160a01b0383166100cb578060025f8282546100c0919061040f565b9091555061013b9050565b6001600160a01b0383165f908152602081905260409020548181101561011d5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610089565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b03821661015757600280548290039055610175565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516101ba91815260200190565b60405180910390a3505050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f8301126101ea575f5ffd5b81516001600160401b03811115610203576102036101c7565b604051601f8201601f19908116603f011681016001600160401b0381118282101715610231576102316101c7565b604052818152838201602001851015610248575f5ffd5b8160208501602083015e5f918101602001919091529392505050565b5f5f5f60608486031215610276575f5ffd5b83516001600160401b0381111561028b575f5ffd5b610297868287016101db565b602086015190945090506001600160401b038111156102b4575f5ffd5b6102c0868287016101db565b925050604084015190509250925092565b600181811c908216806102e557607f821691505b60208210810361030357634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561035057805f5260205f20601f840160051c8101602085101561032e5750805b601f840160051c820191505b8181101561034d575f815560010161033a565b50505b505050565b81516001600160401b0381111561036e5761036e6101c7565b6103828161037c84546102d1565b84610309565b6020601f8211600181146103b4575f831561039d5750848201515b5f19600385901b1c1916600184901b17845561034d565b5f84815260208120601f198516915b828110156103e357878501518255602094850194600190920191016103c3565b508482101561040057868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b8082018082111561042e57634e487b7160e01b5f52601160045260245ffd5b92915050565b6106ca806104415f395ff3fe608060405234801561000f575f5ffd5b506004361061009f575f3560e01c8063313ce5671161007257806395d89b411161005857806395d89b4114610140578063a9059cbb14610148578063dd62ed3e1461015b575f5ffd5b8063313ce5671461010957806370a0823114610118575f5ffd5b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100e457806323b872dd146100f6575b5f5ffd5b6100ab610193565b6040516100b89190610563565b60405180910390f35b6100d46100cf3660046105b3565b610223565b60405190151581526020016100b8565b6002545b6040519081526020016100b8565b6100d46101043660046105db565b61023c565b604051601281526020016100b8565b6100e8610126366004610615565b6001600160a01b03165f9081526020819052604090205490565b6100ab61025f565b6100d46101563660046105b3565b61026e565b6100e8610169366004610635565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6060600380546101a290610666565b80601f01602080910402602001604051908101604052809291908181526020018280546101ce90610666565b80156102195780601f106101f057610100808354040283529160200191610219565b820191905f5260205f20905b8154815290600101906020018083116101fc57829003601f168201915b5050505050905090565b5f3361023081858561027b565b60019150505b92915050565b5f3361024985828561028d565b61025485858561030e565b506001949350505050565b6060600480546101a290610666565b5f3361023081858561030e565b610288838383600161036b565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f1981101561030857818110156102fa57604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b61030884848484035f61036b565b50505050565b6001600160a01b03831661033757604051634b637e8f60e11b81525f60048201526024016102f1565b6001600160a01b0382166103605760405163ec442f0560e01b81525f60048201526024016102f1565b61028883838361043d565b6001600160a01b0384166103945760405163e602df0560e01b81525f60048201526024016102f1565b6001600160a01b0383166103bd57604051634a1406b160e11b81525f60048201526024016102f1565b6001600160a01b038085165f908152600160209081526040808320938716835292905220829055801561030857826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161042f91815260200190565b60405180910390a350505050565b6001600160a01b038316610467578060025f82825461045c919061069e565b909155506104d79050565b6001600160a01b0383165f90815260208190526040902054818110156104b95760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016102f1565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b0382166104f357600280548290039055610511565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161055691815260200190565b60405180910390a3505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b03811681146105ae575f5ffd5b919050565b5f5f604083850312156105c4575f5ffd5b6105cd83610598565b946020939093013593505050565b5f5f5f606084860312156105ed575f5ffd5b6105f684610598565b925061060460208501610598565b929592945050506040919091013590565b5f60208284031215610625575f5ffd5b61062e82610598565b9392505050565b5f5f60408385031215610646575f5ffd5b61064f83610598565b915061065d60208401610598565b90509250929050565b600181811c9082168061067a57607f821691505b60208210810361069857634e487b7160e01b5f52602260045260245ffd5b50919050565b8082018082111561023657634e487b7160e01b5f52601160045260245ffdfea164736f6c634300081b000a";

type MockTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockToken__factory extends ContractFactory {
  constructor(...args: MockTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name_: string,
    symbol_: string,
    initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      name_,
      symbol_,
      initialSupply,
      overrides || {}
    );
  }
  override deploy(
    name_: string,
    symbol_: string,
    initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      name_,
      symbol_,
      initialSupply,
      overrides || {}
    ) as Promise<
      MockToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockToken__factory {
    return super.connect(runner) as MockToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTokenInterface {
    return new Interface(_abi) as MockTokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockToken {
    return new Contract(address, _abi, runner) as unknown as MockToken;
  }
}
