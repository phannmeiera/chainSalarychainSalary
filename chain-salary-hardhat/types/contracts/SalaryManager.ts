/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SalaryManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addEmployee"
      | "admin"
      | "claimSalary"
      | "fundContract"
      | "getDAOFunds"
      | "getEmployeeInfo"
      | "getNextPayday"
      | "pauseEmployee"
      | "protocolId"
      | "removeEmployee"
      | "totalPaid"
      | "updateCycle"
      | "updateSalary"
      | "withdrawUnallocatedFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmployeeAdded"
      | "EmployeePaused"
      | "EmployeeRemoved"
      | "EmployeeUpdated"
      | "FundedDAO"
      | "SalaryPaid"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addEmployee",
    values: [AddressLike, BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimSalary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDAOFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextPayday",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseEmployee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeEmployee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "totalPaid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCycle",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSalary",
    values: [AddressLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUnallocatedFunds",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDAOFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextPayday",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPaid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnallocatedFunds",
    data: BytesLike
  ): Result;
}

export namespace EmployeeAddedEvent {
  export type InputTuple = [emp: AddressLike, cycleSeconds: BigNumberish];
  export type OutputTuple = [emp: string, cycleSeconds: bigint];
  export interface OutputObject {
    emp: string;
    cycleSeconds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmployeePausedEvent {
  export type InputTuple = [emp: AddressLike];
  export type OutputTuple = [emp: string];
  export interface OutputObject {
    emp: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmployeeRemovedEvent {
  export type InputTuple = [emp: AddressLike];
  export type OutputTuple = [emp: string];
  export interface OutputObject {
    emp: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmployeeUpdatedEvent {
  export type InputTuple = [emp: AddressLike];
  export type OutputTuple = [emp: string];
  export interface OutputObject {
    emp: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundedDAOEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SalaryPaidEvent {
  export type InputTuple = [
    emp: AddressLike,
    amount: BigNumberish,
    nextPayday: BigNumberish
  ];
  export type OutputTuple = [emp: string, amount: bigint, nextPayday: bigint];
  export interface OutputObject {
    emp: string;
    amount: bigint;
    nextPayday: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SalaryManager extends BaseContract {
  connect(runner?: ContractRunner | null): SalaryManager;
  waitForDeployment(): Promise<this>;

  interface: SalaryManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addEmployee: TypedContractMethod<
    [
      emp: AddressLike,
      encSalary: BytesLike,
      inputProof: BytesLike,
      cycleSeconds: BigNumberish,
      salaryPerCycleClear: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  claimSalary: TypedContractMethod<[], [void], "nonpayable">;

  fundContract: TypedContractMethod<[], [void], "payable">;

  getDAOFunds: TypedContractMethod<[], [bigint], "view">;

  getEmployeeInfo: TypedContractMethod<
    [emp: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        salaryPerCycle: string;
        cycleSeconds: bigint;
        lastClaimAt: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  getNextPayday: TypedContractMethod<[emp: AddressLike], [bigint], "view">;

  pauseEmployee: TypedContractMethod<[emp: AddressLike], [void], "nonpayable">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  removeEmployee: TypedContractMethod<[emp: AddressLike], [void], "nonpayable">;

  totalPaid: TypedContractMethod<[], [bigint], "view">;

  updateCycle: TypedContractMethod<
    [emp: AddressLike, newCycleSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateSalary: TypedContractMethod<
    [
      emp: AddressLike,
      encSalary: BytesLike,
      inputProof: BytesLike,
      newSalaryPerCycleClear: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawUnallocatedFunds: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addEmployee"
  ): TypedContractMethod<
    [
      emp: AddressLike,
      encSalary: BytesLike,
      inputProof: BytesLike,
      cycleSeconds: BigNumberish,
      salaryPerCycleClear: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimSalary"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fundContract"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getDAOFunds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEmployeeInfo"
  ): TypedContractMethod<
    [emp: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        salaryPerCycle: string;
        cycleSeconds: bigint;
        lastClaimAt: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNextPayday"
  ): TypedContractMethod<[emp: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pauseEmployee"
  ): TypedContractMethod<[emp: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeEmployee"
  ): TypedContractMethod<[emp: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalPaid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateCycle"
  ): TypedContractMethod<
    [emp: AddressLike, newCycleSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSalary"
  ): TypedContractMethod<
    [
      emp: AddressLike,
      encSalary: BytesLike,
      inputProof: BytesLike,
      newSalaryPerCycleClear: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawUnallocatedFunds"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EmployeeAdded"
  ): TypedContractEvent<
    EmployeeAddedEvent.InputTuple,
    EmployeeAddedEvent.OutputTuple,
    EmployeeAddedEvent.OutputObject
  >;
  getEvent(
    key: "EmployeePaused"
  ): TypedContractEvent<
    EmployeePausedEvent.InputTuple,
    EmployeePausedEvent.OutputTuple,
    EmployeePausedEvent.OutputObject
  >;
  getEvent(
    key: "EmployeeRemoved"
  ): TypedContractEvent<
    EmployeeRemovedEvent.InputTuple,
    EmployeeRemovedEvent.OutputTuple,
    EmployeeRemovedEvent.OutputObject
  >;
  getEvent(
    key: "EmployeeUpdated"
  ): TypedContractEvent<
    EmployeeUpdatedEvent.InputTuple,
    EmployeeUpdatedEvent.OutputTuple,
    EmployeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FundedDAO"
  ): TypedContractEvent<
    FundedDAOEvent.InputTuple,
    FundedDAOEvent.OutputTuple,
    FundedDAOEvent.OutputObject
  >;
  getEvent(
    key: "SalaryPaid"
  ): TypedContractEvent<
    SalaryPaidEvent.InputTuple,
    SalaryPaidEvent.OutputTuple,
    SalaryPaidEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "EmployeeAdded(address,uint64)": TypedContractEvent<
      EmployeeAddedEvent.InputTuple,
      EmployeeAddedEvent.OutputTuple,
      EmployeeAddedEvent.OutputObject
    >;
    EmployeeAdded: TypedContractEvent<
      EmployeeAddedEvent.InputTuple,
      EmployeeAddedEvent.OutputTuple,
      EmployeeAddedEvent.OutputObject
    >;

    "EmployeePaused(address)": TypedContractEvent<
      EmployeePausedEvent.InputTuple,
      EmployeePausedEvent.OutputTuple,
      EmployeePausedEvent.OutputObject
    >;
    EmployeePaused: TypedContractEvent<
      EmployeePausedEvent.InputTuple,
      EmployeePausedEvent.OutputTuple,
      EmployeePausedEvent.OutputObject
    >;

    "EmployeeRemoved(address)": TypedContractEvent<
      EmployeeRemovedEvent.InputTuple,
      EmployeeRemovedEvent.OutputTuple,
      EmployeeRemovedEvent.OutputObject
    >;
    EmployeeRemoved: TypedContractEvent<
      EmployeeRemovedEvent.InputTuple,
      EmployeeRemovedEvent.OutputTuple,
      EmployeeRemovedEvent.OutputObject
    >;

    "EmployeeUpdated(address)": TypedContractEvent<
      EmployeeUpdatedEvent.InputTuple,
      EmployeeUpdatedEvent.OutputTuple,
      EmployeeUpdatedEvent.OutputObject
    >;
    EmployeeUpdated: TypedContractEvent<
      EmployeeUpdatedEvent.InputTuple,
      EmployeeUpdatedEvent.OutputTuple,
      EmployeeUpdatedEvent.OutputObject
    >;

    "FundedDAO(address,uint256)": TypedContractEvent<
      FundedDAOEvent.InputTuple,
      FundedDAOEvent.OutputTuple,
      FundedDAOEvent.OutputObject
    >;
    FundedDAO: TypedContractEvent<
      FundedDAOEvent.InputTuple,
      FundedDAOEvent.OutputTuple,
      FundedDAOEvent.OutputObject
    >;

    "SalaryPaid(address,uint256,uint64)": TypedContractEvent<
      SalaryPaidEvent.InputTuple,
      SalaryPaidEvent.OutputTuple,
      SalaryPaidEvent.OutputObject
    >;
    SalaryPaid: TypedContractEvent<
      SalaryPaidEvent.InputTuple,
      SalaryPaidEvent.OutputTuple,
      SalaryPaidEvent.OutputObject
    >;

    "Withdraw(address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
